# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

#on:
#  release:
#    types: [published]

#on:
#  push:
#    tags:
#      - "*.*.*"

#on:
#  release:
#    types: [created]

on:
  push:
    branches: [ main ]

permissions:
  contents: read

jobs:

#  build_wheels:
#    runs-on:  ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        # os: [windows-latest, macos-latest, ubuntu-latest]
#        os: [ ubuntu-latest ]
#        # python-version: [ 3.7, 3.8, 3.6 ]
#        python-version: [ 3.8 ]
##        exclude:
##          - os: windows-latest
##            python-version: 3.6
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install build
#
#      - name: Build package
#        run: python -m build
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: windows-whl-artifact-upload
#          path: dist/*.whl

#  build_tar:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python
#        uses: actions/setup-python@v3
#        with:
#          python-version: '3.x'
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install build
#
#      - name: Build package
#        run: python -m build
#      - uses: actions/upload-artifact@v3
#        with:
#          name: sourcecode-artifact-upload
#          path: dist/*.tar.gz


  build_linux_wheel:

    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_x86_64

    strategy:
      fail-fast: false
      matrix:
        # python-name: [ cp310-cp310,  cp311-cp311,  cp36-cp36m,  cp37-cp37m,  cp38-cp38,  cp39-cp39 ]
        python-name: [ cp38-cp38 ]

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          yum install -y atlas-devel
          /opt/python/${{ matrix.python-name }}/bin/python -m pip install --upgrade pip
          /opt/python/${{ matrix.python-name }}/bin/python -m pip install build

      - name: Build package
        run: /opt/python/${{ matrix.python-name }}/bin/python -m build

      - name: Repair wheel
        run: |
          ls dist/*.whl | cat | xargs -t -n 1 auditwheel repair -w dist/wheelhouse
          ls -R dist

      - uses: actions/upload-artifact@v3
        with:
          name: sourcecode_artifact
          path: | 
          dist/*.tar.gz
          dist/wheelhouse/*.whl


#  release_and_publish_package:
#    runs-on: ubuntu-latest
#    needs: [build_tar, build_wheels]
#    # needs: [build_linux_wheel, build_windows_wheel]
#
#    steps:
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: Download archives
#        uses: actions/download-artifact@v3
#        with:
#          name: windows-whl-artifact-upload
#          path: dist
#
#      - name: Download archives
#        uses: actions/download-artifact@v3
#        with:
#          name: sourcecode-artifact-upload
#          path: dist
#
#      - name: Display structure of downloaded files
#        run: ls -R
#
#      - name: Publish a Python distribution to PyPI
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN_OAKS }}
#
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        with:
#          token: ${{ secrets.DEV_GITHUB_TOKEN }}
#          files: dist/*


#      - name: Get release
#        id: get_release
#        uses: bruceadams/get-release@v1.2.3
#        env:
#          GITHUB_TOKEN: ${{ secrets.DEV_GITHUB_TOKEN }}
#
#      - name: Upload Release Asset
#        id: upload_release_asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.DEV_GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.get_release.outputs.upload_url }}
#          asset_path: dist/*
#          asset_content_type: application/zip
